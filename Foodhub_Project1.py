# -*- coding: utf-8 -*-
"""Copy of Project 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SnMo-m1i8VnEu4I31H9Ff995Dsf_eHKi

#Project 1 - Python Foundations

Importing required libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#importing google drive
from google.colab import drive
drive.mount('/content/drive')

"""Loading and understanding the data"""

df=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/PGP-DSBA Project 1/foodhub_order.csv')
df.head() #return the first 5 rows to check that the csv was imported properly

"""Observations:
The DataFrame has loaded properly. Data in a single row corresponds to an order placed by a customer.

###**Question 1:** How many rows and columns are present in the data?
"""

df.shape #checking the shape of the dataset

"""Observations: The DataFrame includes 1898 rows (orders) and 9 columns.

###**Question 2:** What are the datatypes of the different columns in the dataset?
"""

df.info() #printing summary of dataframe

"""Observations:

There are 5 numerical columns (the order_id, customer_id, food_preparation_time, and delivery_time columns are integer datatype, and the cost_of_the_order column is float data type), and there are 4 categorical columns (restaurant_name, cuisine_type, day_of_the_week and rating columns are object type).

All 9 columns have 1898 non-null values, which means there are no null values the dataset.

Note: The rating column, which should consist of number values 1 to 5, should be converted to a numeric data type. It would also be helpful to convert the restaurant_name, cuisine_type, and day_of_the_week columns to category datatype. Also, since customer_id and order_id columns are unique identifiers and will not be analyzed statistically, we can convert those to an object data type.

###**Question 3:** Are there any missing values in the data? If yes, treat them using an appropriate method.
"""

df.isnull().sum()

"""Observations:

There are no missing values in the data, as we noted in question 2. Therefore, no columns need to be treated.

**Converting datatypes**

Now that we have observed the datatypes and identified no missing values, we will convert a few of the data types as mentioned above.

Starting with converting the restaurant_name, cuisine_type, and day_of_the_week columns to category datatype.
"""

#creating a for loop to convert the list of column names to category data type
for col in ['restaurant_name','cuisine_type','day_of_the_week']:
  df[col]=df[col].astype('category')

#checking to see if conversion was made properly
df.info()

"""Observations: The change was made properly.

Now we can move on to convert the 'rating' column to a float data type, and the 'customer_id' and 'order_id' columns to an object data type.
"""

#first check unique values of the 'rating' column
df['rating'].unique()

#replace the "Not given" rating values with NaN
df['rating']=df['rating'].replace(['Not given'],np.nan)

#change data type of the column to float
df['rating']=df['rating'].astype('float')

#convert customer_id and order_id to object type
df['customer_id']=df['customer_id'].astype('object')
df['order_id']=df['order_id'].astype('object')

#check to see if all 4 changes have been made properly
df.info()

"""Observations: The changes were made properly.

###**Question 4:** Check the statistical summary of the data. What is the minimum, average, and maximum time it takes for food to be prepared once an order is placed?
"""

df.describe(include='all').T #checking the statistical summary of the data

"""Observations:

The minimum, average, and maximum time is takes for food to be prepared once an order is placed is as follows:

**minimum: 20 minutes**

**average: 27.37 minutes**

**maximum: 35 minutes**



Futher observations on statistical summary:

*Categorical variables:*

-The orders were taken from 178 different restaurants, and Shake Shack is the most commonly occuring restaurant name.

-American is the most commonly occuring cuisine type.

-1351 of 1898 rows in the dataset have "weekend" for day_of_the_week, which means about 71% of the rows.

*Numerical variables:*

-The minimum order cost was around 4 dollars and maximum was around 35. The 25th and 50th percentile costs are only 2 dollars apart, while the 75th is 8 dollars more than the 50th percentile. This suggests slightly left-skewed data.

-The average rating is a 4.3, however the minimum rating is a 3. The median rating is a 5.

-'food_preparation_time' collected ranges from 20 minutes to 35 minutes, and seems to have a normal distribition based on the 25th, 50th, and 75th percentiles (but we will need to confirm this later).

-'delivery_time' collected ranges from 15 to 33 minutes, and also seems to have a fairly normal distribution based on the 25th, 50th, and 75th percentile (but we will also need to confirm this later).

###**Question 5:** How many orders are not rated?
"""

#checking the sum of the null values in the rating column
df['rating'].isna().sum()

"""Observations:

736 out of 1898 orders were not rated (have a rating of NaN since we converted "Not given" ratings to NaN), or around 39%.

##Exploratory Data Analysis (EDA)

###*Univariate Analysis*

###**Question 6:** Explore all the variables and provide observations on their distributions.

Starting with numerical columns
"""

#Cost column

sns.histplot(data=df,x='cost_of_the_order', bins=10, kde=True)
plt.show()
sns.boxplot(data=df,x='cost_of_the_order')
plt.show()

"""Observations:

Cost is slightly right-skewed but does not seem to have any outliers. A cost of around 11-13 dollars is the most commonly occuring cost. However, there is a slight peak of costs around 25 dollars. The median cost is around 14 dollars, therefore, 50% of costs are over 14 dollars.
"""

#rating column

sns.histplot(data=df, x='rating', bins=5, kde=True)
plt.show()
sns.boxplot(data=df, x='rating')
plt.show()

"""Observations:

As we noted above, around 39% of the orders were not rated. The histplot is very left-skewed and the ratings are concentrated near 5 (the boxplot does not even have a right whisker). Some ratings concentrated around a rating of 4, and fewer concentrated around 3.
"""

#food preparation time column

sns.histplot(data=df, x='food_preparation_time', bins=10, kde=True)
plt.show()
sns.boxplot(data=df, x='food_preparation_time')
plt.show()

"""Observations:

The food preparation time column appears to have a relatively even distribution of values between the minimum (20 minutes) and maximum (35 minutes) values. The median is around 27 minutes. There are not any outliers in this column.
"""

#delivery time column

sns.histplot(data=df, x='delivery_time', bins=12, kde=True)
plt.show()
sns.boxplot(data=df, x='delivery_time')
plt.show()

"""Observations:

The delivery time column appears to be slightly left skewed. It seems that most orders are prepared between 24 to 28 minutes. The median value is around 25 minutes. There are no outliers in this column.

Now we can observe the categorical values
"""

#cuisine type column

plt.figure(figsize=(15,8))
sns.countplot(data=df,x='cuisine_type')
plt.xticks(rotation=90)
plt.show()

"""Observations:

American is the most popular cuisine type, followed by Japanese and Italian.

Korean, Southern, Spanish, and Vietnamese are the least popular cuisine types.
"""

#day of the week column

sns.countplot(data=df,x='day_of_the_week')
plt.show()

"""Observations:

The majority of orders were placed on the weekend as opposed to a weekday.

Exploring the restaurant_name, customer_id, and order_id columns through data visualization would not have been insightful for our purposes. We will briefly instead look at the number of unique values in these columns.
"""

#restaurant name

df['restaurant_name'].nunique()

#customer_id

df['customer_id'].nunique()

#order_id

df['order_id'].nunique()

"""Observations:

Orders were placed at 178 different restaurants in this dataframe, and 1200 different customers placed orders. There are 1898 unique order id numbers (which is expected since there are 1898 orders included in the dataframe).

###**Question 7:** Which are the top 5 restaurants in terms of the numbers of orders recieved?
"""

df['restaurant_name'].value_counts(ascending=False).head()
#this code will list the number of orders from each restaurant and order it from high to low
#printing the head of this list will give the first 5 values, and therefore the top 5 restaurants with the highest number of orders

"""Observations:

The top 5 restaurants are Shake Shack with 219 orders, The Meatball Shop with 132 orders, Blue Ribbon Sushi with 119 orders, Blue Ribbon Fried Chicken with 96 orders, and Parm with 68 orders.

###**Question 8:** Which is the most popular cuisine on weekends?
"""

#creating variable that separates only rows with day of the week as "Weekend"
df_weekend=df[df['day_of_the_week']=='Weekend']

#getting value counts for cuisine type in the variable above
df_weekend['cuisine_type'].value_counts(ascending=False)

"""(An alternative to the method above):"""

#grouping the dataframe by day of the week and cuisine type using groupby

df.groupby(['day_of_the_week'])['cuisine_type'].value_counts()

"""Observations:

The most popular cuisine on weekends is American with 415 orders, followed by Japanese with 335 orders, and Italian with 207 orders. The least popular cuisine on weekends is Vietnamese, with 4 orders.

###**Question 9:** What percentage of the orders cost more than 20 dollars?
"""

#creating a variable that stores only the rows that have an order cost value of over 20 dollars
df_20=df[df['cost_of_the_order']>20]

#checking the number of rows in the variable above will give us the number of orders over 20 dollars
print('Number of orders over $20: ',df_20.shape[0])
#.shape[0] will display the number of rows

#calculating the percentage of orders over 20 dollars
print('Percentage of orders over $20: ',(df_20.shape[0]/df.shape[0])*100) #dividing the number of orders over $20 by the number of total orders

"""Observations:

There are 555 orders in the dataframe that have a cost over $20. This is equal to about 29% of the 1898 total orders.

###**Question 10:** What is the mean order delivery time?
"""

df['delivery_time'].mean()

"""Observations:

The mean delivery time based on this dataset is around 24 minutes.

###**Question 11:** The company has decided to give 20% discount vouchers to the top 3 most frequent customers. Find the IDs of these customers and the number of orders they placed.
"""

df['customer_id'].value_counts(ascending=False).head()
#the .value_counts() function on the 'customer_id' column will give the amount of times a certain customer id shows up in the dataset (i.e. how many orders they placed)
# .head() will give the first 5 (highest number of orders). Though the promotion chooses 3, we can see the first 5 to make sure there isn't a tie.

"""Observations: The top 3 most frequent customers are customer ID 52832 with 13 orders, 47440 with 10 orders, and 83287 with 9 orders.

###*Multivariate Analysis*

###**Question 12:** Perform bivariate/multivariate analysis to explore relationships between the important variables in the dataset.
"""

#first check correlation of numerical variables with heatmap
sns.heatmap(data=df.corr(), annot=True, vmin=-1, vmax=1, cmap='Spectral')
plt.show()

#check correlation with a pairplot as well

sns.pairplot(data=df, diag_kind='kde')
plt.show()

"""Observations:

The 2 columns with the highest correlation is cost of the order and food preparation time. However, this correlation is still not very high.

No other variables have a notably high correlation.
"""

#look at relationship between order cost and food preparation time

sns.jointplot(data=df, x='cost_of_the_order', y='food_preparation_time');

"""Observations:

As noted in the heat map, there doesn't seem to be a very strong correlation between food preparation time and cost of the order.

The distribution of these two variables is segmented/multimodal instead of a normal distribution, so this outcome makes sense.

*Since order cost and ratings are two metrics that are likely very important to restaurants and to FoodHub, we can start by checking those columns against the other columns. We will start with cost.*
"""

#start with cost and day of the week

sns.boxplot(data=df, x='day_of_the_week', y='cost_of_the_order')
plt.show()

sns.stripplot(data=df, x='day_of_the_week', y='cost_of_the_order', jitter=True)

"""Observations:

The median order cost on the weekends and weekdays is around 15 dollars, and the range of order costs is slightly smaller on weekends. However, the difference is very small and these boxplots are nearly identical. The stripplot seems to follow the same pattern as well (for example having a visible gap in order with a cost between around 26-29 dollars).
"""

#cost and cuisine type

plt.figure(figsize=(15,7))
sns.boxplot(data=df, x='cuisine_type', y='cost_of_the_order')
plt.xticks(rotation=90)
plt.show()

"""Observations:

The median of the order cost of all cuisines falls within the 11-21 range, with Vietnamese cuisine having the lowest median order costs and French cuisine having the highest.

Korean cuisine has a comparatively very small range of order costs (with a few outliers), while Chinese cuisine has a comparatively high range of order costs.

Most (but not all) cuisines have a range of order costs between 6-34 dollars.
"""

#cost and rating

sns.catplot(data=df, col='rating', y='cost_of_the_order', kind='violin')
plt.show()

sns.boxplot(data=df, x='rating', y='cost_of_the_order')
plt.show()

"""Observations:

Both the violin plots and the box plots look very similar. The cost of orders with ratings of 5 have a slighly higher median than the others but only 1 or 2 dollars. Orders with ratings of 4 have a slightly higher range of costs than the others, but again, only by a couple dollars.
"""

#rating and food preparation time

sns.boxplot(data=df, x='rating',y='food_preparation_time')
plt.show()

plt.figure(figsize=(15,7))
sns.lineplot(data=df,x='food_preparation_time', y='rating', ci=False);

"""Observations:

There does not seem to be a general trend regarding the ratings given and food preparation time. However, the  average rating is high when food preparation time is around 20 (the minumum), and is low when food preparation time is around 35 (the maximum).

"""

#rating and delivery time

sns.boxplot(data=df, x='rating', y='delivery_time')

sns.lineplot(data=df, x='delivery_time', y='rating', ci=False)

"""Observations:

The boxplots for ratings of 3, 4, and 5 against delivery time are very similar, with orders with ratings of 4 having a slightly lower median than orders with ratings of 3 or 5.

The lineplot does not show any particular pattern or relationship between these two variables. However, an increase from the lowest average rating occurs around 31 minutes, to the highest average rating at 32.5 minutes. This change however, is only from a rating of 4.1 to 4.6.
"""

#rating and day of the week

sns.countplot(data=df, x='rating', hue='day_of_the_week')
plt.show()

"""Observations:

Overall, more ratings are given on weekends than on weekdays, and this trend remains regardless of rating.
"""

#rating and cuisine type

plt.figure(figsize=(15,7))
sns.countplot(data=df, x='rating', hue='cuisine_type');

"""Observations:

American is consistently the highest-rated cuisine types, followed by Japanese, Italian, and Chinese.

*Now we will check the relationship between other variables.*
"""

#cuisine type and day of the week

plt.figure(figsize=(15,7))
sns.countplot(data=df, x='cuisine_type', hue='day_of_the_week')
plt.xticks(rotation=90)
plt.show()

"""Observations:

On every day of the week, more orders are placed on weekends as opposed to weekdays.
"""

#food preparation time and cuisine type

plt.figure(figsize=(15,9))
sns.catplot(data=df, x='cuisine_type', y='food_preparation_time', kind='point')
plt.xticks(rotation=90)
plt.show();

"""Observations:

The cuisine types have average food preparation times of around 25-28 minutes, with Korean and Vietnamese cuisine having the lowest average food preparation times. Vietnamese also has the highest range of preparation times.
"""

#delivery time and cuisine type

plt.figure(figsize=(15,9))
sns.catplot(data=df, x='cuisine_type', y='delivery_time', kind='point')
plt.xticks(rotation=90)
plt.show();

"""Observations:

Korean has a lower average delivery time compared to other orders, however this difference is only by a few minutes. All cuisine types have an average delivery time of around 21 to 26 minutes.
"""

#day of the week with food preparation time and delivery time

sns.boxplot(data=df, x='day_of_the_week', y='food_preparation_time')
plt.show()

sns.boxplot(data=df, x='day_of_the_week', y='delivery_time')
plt.show()

"""Observations:

The boxplots for food preparation time are nearly identical between weekdays and weekends.

However, delivery time differs by a few minutes between weekdays and weekends. Weekdays have a median delivery time of around 28 minutes, and weekends have a delivery time of around 22.5 minutes. There is a smaller range of delivery times for weekdays as well, with the shortest delivery time on a weekday being around 24 minutes. That is higher than the median weekend delivery time.

###**Question 13:** The company wants to provide a promotional offer in the advertisement of the restaurants. The condition to get the offer is that the restaurants must have a rating count of more than 50 and the average rating should be greater than 4. Find the restaurants fulfilling the criteria to get the promotional offer.
"""

df.head()

rest_4 = df.groupby('restaurant_name')['rating'].mean().sort_values(ascending=False).reset_index()
over_4 = rest_4[rest_4['rating']>4]
over_4

#create another variable to get the rows in the original dataframe ('df') only for restaurants included in the rating_counts_50 variable
df_count_50=df[df['restaurant_name'].isin(rating_counts_50)].copy()

#use groupby to calculate the mean ratings of these restaurants, to see if their mean is over 4
df_count_50.groupby(['restaurant_name'])['rating'].mean().sort_values(ascending=False).dropna()

#note: we have already converted the 'rating' column to float

#creating a dataframe with restaurant names and rating counts. We will sort these values in descending order and reset the index
rating_counts=df.groupby('restaurant_name')[['rating']].count().sort_values(by='rating',ascending=False).reset_index()

#checking the rating_counts variable
rating_counts.head()

#create a variable with restaurants that have been rated more than 50 times
rating_counts_50 = rating_counts[rating_counts['rating']>50]['restaurant_name']

#checking the variable
rating_counts_50

#create another variable to get the rows in the original dataframe ('df') only for restaurants included in the rating_counts_50 variable
df_count_50=df[df['restaurant_name'].isin(rating_counts_50)].copy()

#use groupby to calculate the mean ratings of these restaurants, to see if their mean is over 4
df_count_50.groupby(['restaurant_name'])['rating'].mean().sort_values(ascending=False).dropna()

"""Observations: The Meatball Shop, Blue Ribbon Fried Chicken, Shake Shack, and Blue Ribbon Sushi have both an average rating of higher than 4, and have more than 50 ratings, and therefore are qualified for the promotional offer.

###**Question 14:** The company charges the restaurant 25% on the orders having cost greater than 20 dollars and 15% on the orders having cost greater than 5 dollars. Find the net revenue generated by the company across all orders.
"""

#creating a 'for' loop to calculate the charge amount for each order and adding each order charge to the total revenue variable

#set order charge and total revenue variables to zero before beginning loop
order_charge=0
total_revenue=0

for cost in df['cost_of_the_order']: #apply the loop to the cost column in df
  if (cost >5) & (cost <20):
    order_charge=cost*0.15
  elif (cost >20):
    order_charge=cost*0.25
  else:
    order_charge=0
  total_revenue = total_revenue + order_charge  #this will make the total revenue variable equal to the sum of all order charges

print('The net revenue generated on all orders over 5 dollars is', total_revenue)

"""Observations:

The net revenue generated is $6,166.30.

###**Question 15:** The company wants to analyze the total time required to deliver the food. What percentage of orders take more than 60 minutes to get delivered from the time the order is placed?
"""

#adding column to dataframe called "total_time" that adds food preparation time and delivery time together
df['total_time']=df['food_preparation_time']+df['delivery_time']

#creating variable that stores the number of orders with the total time over 60 minutes
count_over60=df[df['total_time']>60].shape[0]

#creating variable that calculates the percentage of these orders as compared to the total orders placed
per_over60=(count_over60/df.shape[0])*100

print(per_over60,'percent of orders take over 60 minutes from order placed to delivery.')

"""Observations:
10.5% of orders placed take over 60 minutes from the time the order is placed to the time the order is delivered.

###**Question 16:** The company wants to analyze the delivery time of the orders on weekdays and weekends. How does the mean delivery time vary during the weekdays and weekends?
"""

#groupby will separate the average delivery time by each value in the 'day_of_the_week' columns (weekend and weekday)
df.groupby('day_of_the_week')['delivery_time'].mean()

"""Observations:

The mean delivery time for the weekdays is 28.34, while the mean delivery time for the weekend is 22.47. This  roughly a 6 minute difference between weekends and weekdays. As we noted above during the univariate analysis, there are significantly more orders on weekends as opposed to weekdays. This may imply that there are more delivery staff available on weekends, or orders placed on weekdays may be clustered in a shorter time span (right after work for example).

The company could also analyze the delivery time of orders between weekdays and weekends using the boxplot provided above, or further visualization and analysis could be carried out as well.

###**Question 17:** What are your conclusions from the analysis? What recommendations would you like to share to help improve the business?

**Conclusions:**

*   The most popular cuisine types are American, Japanese, and Italian. The least popular cuisines are Vietnamese, Spanish, and Korean. The distribution of preferred cuisine type does not seem to change based on the day of the week.
*   While the food preparation time has an even distribution between 20 and 35 minutes, delivery time has a slightly left-skewed distribution and tends to peak around 24 to 28 minutes. This demonstrates that the delivery time has a larger effect on the total preparation time, than the food preparation time does.
*   Only around 61% of orders were rated, and there were 0 ratings of 1 or 2, with most ratings being 4 or 5. This may indicate that satisfied customers are more likely to rate their orders, and unsatisfied customers are not rating their orders.
*   The distribution of ratings (3-5) do not seem to vary much depending on the day of the week, the cuisine type, food preparation time or delivery time. This may suggest that the actual food quality is what is primarily being rated.
*   There is not a strong correlation between any of the numeric variables (food preparation time, delivery time, order cost, rating)

**Recommendations:**



*   Depending on whether FoodHub would want to cater to and boost their already popular cuisines, or attempt to market their less popular cuisines more heavily, another incentive for people to eat these types of cuisine may be implemented (for example, Korean cuisine had the lowest delivery time and food preparation time, which could be highlighted and may be beneficial to busy workers during the week).
*   More data could be collected to determine the reason for the differences in delivery time (for example, is it just that people live X amount of time away from the restaurant?), and measures to decrease those times safely could be implemented in order to decrease the total prep time for the orders.
*   In order to obtain more accurate order rating data, it may be helpful to create an incentive for customers to rate the orders, perhaps with a coupon/gift card or reward points.
*   It may be useful to collect further data on whether the orders placed are for one or more people (ex. one person versus a couple or a family), and this would also provide more insight into the order cost data. For example, there is a small peak of order cost around 25 dollars which may be explained if there is a similar amount of orders placed for more than one person to eat.
*   Since there is such a significant difference between the number of orders placed on the weekends and weekdays, it may be helpful to collect more data to determine the reason for less ordering on the weekends. The delivery time on weekends is lower, so it is possible the a high delivery time may be a constributing factor, and in that case, an increase of delivery staff on weekdays may help improve delivery time.
"""